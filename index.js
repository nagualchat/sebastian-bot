const TelegramBot = require('node-telegram-bot-api'); 
const MongoClient = require("mongodb").MongoClient;
const moment = require('moment');

const config = require('./config/config');
const messages = require('./config/messages');

var mongoUsers, mongoDeleted, mongoThanks;
var lastGoodDay, lastGoodNight;
var report, forward;
var newMembers = {};

// –•–∞–∫ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ building –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ now
const {createServer} = require('http');
const server = createServer(() => {});
server.listen(3000);

MongoClient.connect(config.mongoConnectUrl, (err, database) => {
  if (err) {
    console.log('[Mongo] connection error:', err.message);
    return database.close();
  }
  mongoDeleted = database.collection('deleted_messages');
  mongoUsers = database.collection('users');
});

var groupCreateDate = moment(config.groupCreateDate, 'DD-MM-YYYY');

var bot = new TelegramBot(config.token, {polling: true});
bot.getMe().then((res) => { botId = res.id });

bot.on('polling_error', (err) => {
  console.log('[Telegram] polling error:', err.message);
});

// –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Å—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—ã —á–∞—Ç–∞
// if (moment().format('DD-MM') == moment(groupCreateDate).format('DD-MM')) {
//   var yearAgo = moment().diff(groupCreateDate, 'years');
//   var message = (yearAgo == 1) ? '–æ–¥–∏–Ω –≥–æ–¥' :
//   (yearAgo == 2) ? '–¥–≤–∞ –≥–æ–¥–∞' :
//   (yearAgo == 3) ? '—Ç—Ä–∏ –≥–æ–¥–∞' :
//   'error';
//   if (message == 'error') return;
//   bot.sendMessage('200352801', messages.chatAnniversary.replace('$years', message));
// };

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤; —Ñ—Ä–∞–∑—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// –î–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è - –¥—Ä—É–≥–æ–µ, –¥–ª—è –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è - —Ç—Ä–µ—Ç—å–µ
bot.on('new_chat_members', async (msg) => {
  if (msg.new_chat_member.id == botId) return; // –ß—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Å–∞–º–æ–≥–æ —Å–µ–±—è
  newMembers[msg.new_chat_member.id] = msg.date; // –î–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
  mongoUsers.findOne({userId: msg.new_chat_member.id}, function (err, user) {
    if (err) {
      console.log('[Mongo] find user error:', err.message);
      return;
    }
    if (!user) {
      bot.sendMessage(msg.chat.id, randomMessage(messages.welcomeNew).replace('$name', msg.new_chat_member.first_name));
      mongoUsers.insertOne({userId: msg.new_chat_member.id, joinDate: msg.date});
    } else {
      if (moment().diff(moment.unix(user.joinDate), 'hours') <= config.joinPeriod) {
        bot.sendMessage(msg.chat.id, randomMessage(messages.welcomeRet1).replace('$name', msg.new_chat_member.first_name));
        mongoUsers.update({userId: msg.new_chat_member.id}, {$set: {joinDate: msg.date}})
      } else {
        bot.sendMessage(msg.chat.id, randomMessage(messages.welcomeRet2).replace('$name', msg.new_chat_member.first_name));
        mongoUsers.update({userId: msg.new_chat_member.id}, {$set: {joinDate: msg.date}})
      }
    }
  })
});

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
bot.onText(/—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|^(—Å–ø—Å|thx)(\.|\!)?$/i, (msg) => {
  if (msg.reply_to_message && msg.from.id != msg.reply_to_message.from.id) {
    mongoUsers.findOne({userId: msg.reply_to_message.from.id}, function (err, user) {
      if (err) {
        console.log('[Mongo] find user error:', err.message);
        return;
      }
      if (!user) {
        mongoUsers.insertOne({userId: msg.reply_to_message.from.id, repPoints: 1});
        bot.sendMessage(msg.chat.id, messages.repThxFirst.replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      } else if (!user.repPoints) {
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: 1}})
        bot.sendMessage(msg.chat.id, messages.repThxFirst.replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      } else {
        var count = user.repPoints + 1;
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: count}})
        bot.sendMessage(msg.chat.id, randomMessage(messages.repThx).replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      }
    })
  }
});

bot.onText(/^–ø–ª—é—Å—É—é|üëç|\+(\.|\!)?$/i, (msg) => {
  if (msg.reply_to_message && msg.from.id != msg.reply_to_message.from.id) {
    mongoUsers.findOne({userId: msg.reply_to_message.from.id}, function (err, user) {
      if (err) {
        console.log('[Mongo] find user error:', err.message);
        return;
      }
      if (!user) {
        mongoUsers.insertOne({userId: msg.reply_to_message.from.id, repPoints: 1});
        bot.sendMessage(msg.chat.id, messages.repPlusFirst.replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      } else if (!user.repPoints) {
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: 1}})
        bot.sendMessage(msg.chat.id, messages.repPlusFirst.replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      } else {
        var count = user.repPoints + 1;
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: count}})
        bot.sendMessage(msg.chat.id, randomMessage(messages.repPlus).replace('$name', msg.reply_to_message.from.first_name).replace('$points', count));
      }
    })
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /me, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
bot.onText(/\/me/, (msg) => {
  mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
    if (err) {
      console.log('[Mongo] find user error:', err.message);
      return;
    }
    if (!user || user.repPoints == 0) {
      bot.sendMessage(msg.chat.id, messages.showRep0.replace('$name', msg.from.first_name));
    } else {
      bot.sendMessage(msg.chat.id, messages.showRep.replace('$name', msg.from.first_name).replace('$points', user.repPoints));      
    }
  })
});

bot.onText(/\/start/, (msg) => {
  if (msg.chat.type == 'private') {
    bot.sendMessage(msg.chat.id, messages.help);
  }
});

bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, messages.help);
});

// –ö–æ–º–∞–Ω–¥–∞ /say, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
bot.onText(/\/say (.+)/, async (msg, match) => {
  if (msg.chat.type == 'private' &&  await isAdmin(config.group, msg.from.id)) {
    bot.sendMessage(config.group, match[1]); 
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /del, —É–¥–∞–ª—è—é—â–∞—è –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –∞–≥—Ä—É–º–µ–Ω—Ç–æ–º, —Ç–æ –æ–Ω –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ –ø—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
// –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–≤–∞—Ç
bot.onText(/\/(del+) ?(.+)?/, async (msg, match) => {
  if (msg.chat.type == 'supergroup' && await isAdmin(msg.chat.id, msg.from.id)) {
    forward = await bot.forwardMessage(config.channel, msg.chat.id, msg.reply_to_message.message_id, {disable_notification:true});  
    if (match[2]) {
      report = await bot.sendMessage(msg.chat.id, messages.deleteDel2.replace('$username', '<a href=\"tg://user?id=' + msg.reply_to_message.from.id + '/\">' + 
      msg.reply_to_message.from.first_name + '</a>') + match[2], {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: '–ü–æ–∫–∞–∑–∞—Ç—å', callback_data: 'sendDelMsg'}]]}});
    } else {
      report = await bot.sendMessage(msg.chat.id, messages.deleteDel1.replace('$username', '<a href=\"tg://user?id=' + msg.reply_to_message.from.id + '/\">' + 
      msg.reply_to_message.from.first_name + '</a>'), {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: messages.reportBtn, callback_data: 'sendDelMsg'}]]}});
    }
      mongoDeleted.insertOne({msg, reportId: report.message_id, forwardId: forward.message_id});
      bot.deleteMessage(msg.chat.id, msg.reply_to_message.message_id);
    };
});

// –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
bot.onText(/–¥–æ–±—Ä\S* —É—Ç—Ä\S*|—É—Ç—Ä\S* –¥–æ–±—Ä–æ\S*|^(—É—Ç—Ä–∞|—É—Ç—Ä–µ—á–∫–∞)(\.|\!)?$/i, (msg) => {
  if (!lastGoodDay) {
    bot.sendMessage(msg.chat.id, randomMessage(messages.goodDay));
    lastGoodDay = msg.date;
  } else if (moment().diff(moment.unix(lastGoodDay), 'seconds') >= config.responseTimeout) {
     bot.sendMessage(msg.chat.id, randomMessage(messages.goodDay));
     lastGoodDay = msg.date;
  }
});

bot.onText(/—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏|–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤\S*|–¥–æ–±—Ä–æ–Ω–æ—á\S*|^(–Ω–æ—á–∫–∏|–Ω–æ—á–∫–∏ –≤—Å–µ–º|—Å–Ω–æ–≤|–≤—Å–µ–º —Å–Ω–æ–≤)(\.|\!)?$/i, (msg) => {
  if (!lastGoodNight) {
    bot.sendMessage(msg.chat.id, randomMessage(messages.goodNight));
    lastGoodNight = msg.date;
  } else if (moment().diff(moment.unix(lastGoodNight), 'seconds') >= config.responseTimeout) {
     bot.sendMessage(msg.chat.id, randomMessage(messages.goodNight));
     lastGoodNight = msg.date;
  }
});

// –ê–Ω—Ç–∏—Å–ø–∞–º, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –Ω–µ–¥–∞–≤–Ω–æ –≤–æ—à–µ–¥—à–∏—Ö –≤ —á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ @username, t.me, telegram.me –∏ forward, —É–¥–∞–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏—è
// –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–≤–∞—Ç
bot.on('text', async (msg) => {
  if (msg.chat.type == 'private') console.log('[Log]', msg.from.first_name + ' (' + msg.from.id + ')' + ' wrote to bot: ' + msg.text);
  for (var id in newMembers) {
    if (msg.from.id == id) {
      if (moment().diff(moment.unix(newMembers[id]), 'seconds') <= config.antispamPeriod) {
        var entities = msg.entities || [];
        for ( var entity of entities ) {
          if ( entity.type && entity.type == 'mention' ) return deleteSpam(msg);
        }
        if (/t(?:elegram)?\.me/.test(msg.text)) return deleteSpam(msg);
        if (msg.forward_from_chat) return deleteSpam(msg);
      }
    }
  };
});

// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤ –∫–∞–Ω–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–≤–∞—Ç
bot.on('callback_query', async (msg) => {
  if (msg.data === 'sendDelMsg') {
    console.log('[Log]', msg.from.first_name + ' (' + msg.from.id + ')' + ' pressed the sendDelMsg button under ' + msg.message.message_id + ' bot message');
    var answer = await bot.answerCallbackQuery(msg.id);
    mongoDeleted.findOne({reportId: msg.message.message_id}, function (err, find) {
      if (err) {
        console.log('[Mongo] find deleted message error:', err.message);
        return;
      }
      bot.forwardMessage(msg.from.id, config.channel, find.forwardId);
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
const isAdmin = async (chatId, userId) => {
  const admins = await bot.getChatAdministrators(chatId);
  if (admins.filter(x => x.user.id == userId).length > 0) {
      return true;
    } else {
      return false;
    };
};

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
// –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
const deleteSpam = async (msg) => {
  forward = await bot.forwardMessage(config.channel, msg.chat.id, msg.message_id, {disable_notification:true});
  report = await bot.sendMessage(msg.chat.id, messages.deleteSpam.replace('$username', '<a href=\"tg://user?id=' + msg.from.id + '/\">' + 
  msg.from.first_name + '</a>'), {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: messages.reportBtn, callback_data: 'sendDelMsg'}]]}});
  mongoDeleted.insertOne({msg, reportId: report.message_id, forwardId: forward.message_id});
  bot.deleteMessage(msg.chat.id, msg.message_id);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
const randomMessage = (message) => {
  var max = message.length - 1;
  var randomIndex = Math.floor(Math.random() * ((max - 0) + 1));
  return message[randomIndex];
};
