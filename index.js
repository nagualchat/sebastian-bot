const TelegramBot = require('node-telegram-bot-api'); 
const MongoClient = require('mongodb').MongoClient;
const moment = require('moment');
const fs = require('fs');

const config = require('./config/config');
const messages = require('./config/messages');
const tools = require('./tools');

var lastGoodDay, lastGoodNight;
var session = {}; 

// –•–∞–∫ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ building –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ now
const http = require('http');
http.createServer(function (req, res) {
  res.write('Hello World!');
  res.end();
}).listen(8080);

MongoClient.connect(config.mongoConnectUrl, (err, database) => {
  if (err) {
    console.log('[Log] –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ mongo:', err.message);
    return database.close();
  }
  const mongoFavs = database.collection('favorite_messages');
  const mongoLog = database.collection('log_messages');
  const mongoUsers = database.collection('users');
  const mongoDeleted = database.collection('deleted_messages');
  const mongoBooks = database.collection('books');
  
  const bot = new TelegramBot(config.token, {polling: true});
  bot.getMe().then((res) => { botMe = res });
  bot.getChat(config.group).then((res) => { group = res });

  bot.on('polling_error', (err) => {
    if (err.message.match(/502 Bad Gateway/i)) {
      console.log('[Log] EPARSE: Error parsing Telegram response (502 Bad Gateway)');
    } else {
      console.log('[Log]', err.message);
    }
  });

  // –ò–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫ –ø–æ –∫–Ω–∏–≥–∞–º –ö–∞—Å—Ç–∞–Ω–µ–¥—ã
  bot.on('inline_query', msg => {
    if (msg.query) {
      var offset = parseInt(msg.offset) || 0;
      // explain() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –Ω—É—Ç—Ä–∞ –º–æ–Ω–≥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ
      mongoBooks.find({$text: {$search: msg.query}}).explain(function(err, explain){
        mongoBooks.find({$text: {$search: msg.query}}, {score: {$meta: 'textScore'}}).sort({score:{$meta:'textScore'}}).limit(100).toArray((err, res) => {
          var results = res.map(a => {
              return {
                id: a._id,
                type: 'article',
                title: a.book,
                input_message_content: {
                  parse_mode: 'markdown',
                  message_text: `${a.text}\n[${a.book}](${config.booksUrl}/${a.book.replace('‚Äî', '-')}.html#L${a.number})`,
                  disable_web_page_preview: true
                // –í description –ø–æ–º–µ—â–∞–µ—Ç—Å—è –æ–∫–æ–ª–æ 130 —Å–∏–º–≤–æ–ª–æ–≤
                }, description: tools.truncate(a.text, explain.executionStats.executionStages.parsedTextQuery.terms[0], 120)
              }
            })
            bot.answerInlineQuery(msg.id, results.slice(offset, offset + 5), {next_offset: offset + 5, cache_time: 0, switch_pm_text: tools.showSearchPhrases(results, explain.executionStats.executionStages.parsedTextQuery), switch_pm_parameter: 'search'});
        })
      console.log('[Log]', tools.nameToBeShow(msg.from) + ' –∏—â–µ—Ç', msg.query);
      //console.log(explain.executionStats.executionStages.parsedTextQuery);      
      });
    } else {
      bot.answerInlineQuery(msg.id, [], {cache_time: 0, switch_pm_text: '–°–ø—Ä–∞–≤–∫–∞', switch_pm_parameter: 'help'});
    }
  });

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤; —Ñ—Ä–∞–∑—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  // –î–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è - –¥—Ä—É–≥–æ–µ, –¥–ª—è –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è - —Ç—Ä–µ—Ç—å–µ
  bot.on('new_chat_members', async (msg) => {
    if (msg.new_chat_member.id == botMe.id) return; // –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (msg.new_chat_member.is_bot === true) {
      await bot.kickChatMember(msg.chat.id, msg.new_chat_member.id);
      await bot.sendPhoto(msg.chat.id, messages.kickBotImg, {caption: messages.kickBotMsg});
      return;
    };
    mongoUsers.findOne({userId: msg.new_chat_member.id}, function (err, user) {
      if (!user) {
        bot.sendMessage(msg.chat.id,  tools.getRandom(messages.welcomeNew).replace('$name', tools.nameToBeShow(msg.new_chat_member)), {parse_mode : 'markdown'});
        mongoUsers.insertOne({userId: msg.new_chat_member.id, joinDate: msg.date, antiSpam: 1});
      } else {
        if (moment().diff(moment.unix(user.joinDate), 'hours') <= config.joinPeriod) {
          bot.sendMessage(msg.chat.id,  tools.getRandom(messages.welcomeRet1).replace('$name', tools.nameToBeShow(msg.new_chat_member)));
          mongoUsers.update({userId: msg.new_chat_member.id}, {$set: {joinDate: msg.date}})
        } else {
          bot.sendMessage(msg.chat.id,  tools.getRandom(messages.welcomeRet2).replace('$name', tools.nameToBeShow(msg.new_chat_member)));
          mongoUsers.update({userId: msg.new_chat_member.id}, {$set: {joinDate: msg.date}})
        }
      }
    })
  });

  // –ê–Ω—Ç–∏—Å–ø–∞–º, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –Ω–µ–¥–∞–≤–Ω–æ –≤–æ—à–µ–¥—à–∏—Ö –≤ —á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ forward –∏ —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ @username, t.me, telegram.me, —É–¥–∞–ª—è—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
  // –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–≤–∞—Ç
  bot.on('message', async (msg) => {
    mongoUsers.findOne({userId: msg.from.id, antiSpam: 1}, async function (err, user) {
      var deleted = false;
      if (user) {
        if (msg.forward_from_chat) {
          if (!(msg.document || msg.audio)) {
            deleteSpam(msg);
            deleted = true;
          }
        } else if (msg.text) {
          if (/t(?:elegram)?\.me/.test(msg.text)) {
            deleteSpam(msg);
            deleted = true;
          }
          var entities = msg.entities || [];
          for (var entity of entities) {
            if (entity.type && entity.type == 'mention') {
              var mentioned = msg.text.substr(entity.offset, entity.length);
              try {
                var chat = await bot.getChat(mentioned);
                if (chat && chat.type == 'channel' || chat && chat.type == 'supergroup') {
                  deleteSpam(msg);
                  deleted = true;
                  break;
                }
              } catch(err) {
              }
            }
          }        
        } else if (msg.caption) {
          if (/t(?:elegram)?\.me/.test(msg.caption)) {
            deleteSpam(msg);   
            deleted = true;
          }  
          var entities = msg.caption_entities || [];
          for (var entity of entities) {
            if (entity.type && entity.type == 'mention') {
              var mentioned = msg.caption.substr(entity.offset, entity.length);
              try {
                var chat = await bot.getChat(mentioned);
                if (chat && chat.type == 'channel' || chat && chat.type == 'supergroup') {
                  deleteSpam(msg);
                  deleted = true;
                  break;
                }
              } catch(err) {
              }
            }
          }
        }
        if (deleted == false) {
          mongoUsers.update({userId: msg.from.id}, {$unset: {antiSpam: ''}});
        }
      }
    });
  });

  // –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
  bot.onText(/–¥–æ–±—Ä\S* —É—Ç—Ä\S*|—É—Ç—Ä\S* –¥–æ–±—Ä–æ\S*|^(—É—Ç—Ä–∞|—É—Ç—Ä–µ—á–∫–∞)(\.|\!)?$/i, (msg) => {
    if (!lastGoodDay) {
      bot.sendMessage(msg.chat.id,  tools.getRandom(messages.goodDay));
      lastGoodDay = msg.date;
    } else if (moment().diff(moment.unix(lastGoodDay), 'seconds') >= config.responseTimeout) {
      bot.sendMessage(msg.chat.id,  tools.getRandom(messages.goodDay));
      lastGoodDay = msg.date;
    }
  });

  bot.onText(/—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏|–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤\S*|–¥–æ–±—Ä–æ–Ω–æ—á\S*|^(–Ω–æ—á–∫–∏|–Ω–æ—á–∫–∏ –≤—Å–µ–º|—Å–Ω–æ–≤|–≤—Å–µ–º —Å–Ω–æ–≤)(\.|\!)?$/i, (msg) => {
    if (!lastGoodNight) {
      bot.sendMessage(msg.chat.id,  tools.getRandom(messages.goodNight));
      lastGoodNight = msg.date;
    } else if (moment().diff(moment.unix(lastGoodNight), 'seconds') >= config.responseTimeout) {
      bot.sendMessage(msg.chat.id,  tools.getRandom(messages.goodNight));
      lastGoodNight = msg.date;
    }
  });

  // –í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞ "–°–µ–±–∞—Å—Ç—å—è–Ω, 1 –∏–ª–∏ 2?" —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
  // –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–æ–¥–µ "–°–µ–±–∞—Å—Ç—å—è–Ω, —á—Ç–æ—É–≥–æ–¥–Ω–æ?" —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–≤–µ—á–∞–µ—Ç –¥–∞/–Ω–µ—Ç.
  bot.on('text', (msg) => {
    const answer = msg.text.match(/—Å–µ–±–∞—Å—Ç—å—è–Ω(\,)? (.+)\?/i);
    const answerChoice = msg.text.match(/—Å–µ–±–∞—Å—Ç—å—è–Ω(\,)? (.+) –∏–ª–∏ (.+)\?/i);
    if (answerChoice) {
      var index = Math.floor(Math.random() * 2 + 2);
      bot.sendMessage(msg.chat.id, tools.capitalize( tools.getRandom(messages.answerChoice).replace('$variant', answerChoice[index])));
    } else if (answer) {
      bot.sendMessage(msg.chat.id,  tools.getRandom(messages.answer));    
    }
  });

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  bot.onText(/–ø–ª—é—Å—É—é|üëç|\+|—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|—Å–ø—Å|thx/i, (msg) => {
    if (msg.reply_to_message && msg.reply_to_message.from.id != msg.from.id && msg.reply_to_message.from.id != botMe.id) {
      mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
        if (!user) {
          console.log('[Log] ' + msg.reply_to_message.from.id + ' –Ω–∞—á–∏—Å–ª–µ–Ω –ø–ª—é—Å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ)');          
          reputationInc(msg);
          mongoUsers.insertOne({userId: msg.from.id, repIncDate: msg.date});
        } else if (!user.repIncDate) {
          console.log('[Log] ' + msg.reply_to_message.from.id + ' –Ω–∞—á–∏—Å–ª–µ–Ω –ø–ª—é—Å (–ø–µ—Ä–≤—ã–π)'); 
          reputationInc(msg);
          mongoUsers.update({userId: msg.from.id}, {$set: {repIncDate: msg.date}});
          // –ü–ª—é—Å—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞
        } else if (moment().diff(moment.unix(user.repIncDate), 'seconds') >= config.reputationTimeout) {
          reputationInc(msg);
          console.log('[Log] ' + msg.reply_to_message.from.id + ' –Ω–∞—á–∏—Å–ª–µ–Ω –ø–ª—é—Å'); 
          mongoUsers.update({userId: msg.from.id}, {$set: {repIncDate: msg.date}});
        }
      })
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /top
  bot.onText(/^\/top\b/, (msg) => {
    mongoUsers.find({repPoints: {$gte: 1}}).limit(20).sort({repPoints: -1}).toArray(async function(err, users) {
      var s = [];
      for (let user of users) {
        var success = true;
        try {
          var inf = await bot.getChatMember(config.group, user.userId);
        } catch(err){
          success = false;
        }
        if(success != false) {
          s.push(tools.nameToBeShow(inf.user) + ': ' + user.repPoints);
        }
      };
       bot.sendMessage(msg.chat.id, messages.repTop + s.join('\n'), {parse_mode: 'HTML', disable_web_page_preview: 'true'});
    })
  });

  // –ö–æ–º–∞–Ω–¥–∞ /buy, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø–ª—é—Å—ã
  bot.onText(/^\/buy\b/, (msg) => {
    if (msg.chat.type == 'supergroup') {
      mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
        if (!user || user.repPoints == undefined) user.repPoints = 0;
        bot.sendMessage(msg.chat.id, messages.repStore.replace('$name', tools.nameToBeShow(msg.from)).replace('$points', tools.declension(user.repPoints, 'plus')), {parse_mode : 'markdown', reply_markup: {inline_keyboard: [[{text: '–¶–∏—Ç–∞—Ç–∞', callback_data: 'buy_quote_' + msg.from.id}, {text: '–®—É—Ç–∫–∞', callback_data: 'buy_joke_' + msg.from.id}]]}});
      })
    } else bot.sendMessage(msg.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤ –æ–±—â–µ–º —á–∞—Ç–µ.');
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ \gift –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è –ø–ª—é—Å–æ–≤ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
  bot.onText(/^\/gift\b ?(.+)?/, (msg, match) => {
    if (msg.chat.type == 'supergroup' && msg.reply_to_message && msg.reply_to_message.from.id != msg.from.id && msg.reply_to_message.from.id != botMe.id && match[1]) {
      var gift = Number(match[1]);
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª—é—Å–æ–≤ –µ—Å—Ç—å –Ω–∞ —Å—á–µ—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –æ–Ω–∏ —Å–Ω–∏–º–∞—é—Ç—Å—è
      mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
        if (user && user.repPoints && user.repPoints >= gift) {
        bot.sendMessage(msg.chat.id, messages.giftMessage.replace('$name', tools.nameToBeShow(msg.from)).replace('$points', tools.declension(gift, 'plus')).replace('$name2', tools.nameToBeShow(msg.reply_to_message.from)));
        mongoUsers.update({userId: msg.from.id}, {$set: {repPoints: user.repPoints-gift}});
        // –ò –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        mongoUsers.findOne({userId: msg.reply_to_message.from.id}, function (err, user) {
          if (!user) {
            mongoUsers.insertOne({userId: msg.reply_to_message.from.id, repPoints: gift});
          } else if (!user.repPoints) {
            mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: gift}})
          } else {
            mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: user.repPoints+gift}});
          }
        })
      } else {
        bot.sendMessage(msg.chat.id, messages.buyNotEnough.replace('$name', tools.nameToBeShow(msg.from)).replace('$points', user.repPoints));  
      }
    })
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /pin, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –ø–ª—é—Å—ã
  bot.onText(/^\/pin\b/, (msg) => {
    if (msg.chat.type == 'supergroup' && msg.reply_to_message && msg.reply_to_message.from.id != botMe.id) {
      mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
        if (user && user.repPoints && user.repPoints >= messages.pinPrice) {
          bot.sendMessage(msg.chat.id, messages.pinMessage.replace('$name', tools.nameToBeShow(msg.from)).replace('$price', tools.declension(messages.pinPrice, 'plus')).replace('$points', user.repPoints-messages.pinPrice));          
          mongoUsers.update({userId: msg.from.id}, {$set: {repPoints: user.repPoints-messages.pinPrice}});
          bot.pinChatMessage(config.group, msg.reply_to_message.message_id);
        } else {
          bot.sendMessage(msg.chat.id, messages.buyNotEnough.replace('$name', tools.nameToBeShow(msg.from)).replace('$points', user.repPoints));  
        }
      })
    }
  });

  // –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ–∫
  bot.onText(/^\/start\b/, (msg) => {
    if (msg.chat.type == 'private') bot.sendMessage(msg.chat.id, messages.help, {parse_mode : 'markdown', disable_web_page_preview: 'true'});
  });

  bot.onText(/^\/help\b/, (msg) => {
    bot.sendMessage(msg.chat.id, messages.help, {parse_mode : 'markdown', disable_web_page_preview: 'true'});
  });

  bot.onText(/^\/ahelp\b/, (msg) => {
    bot.sendMessage(msg.chat.id, messages.ahelp, {parse_mode : 'markdown', disable_web_page_preview: 'true'});
  });

  // –ö–æ–º–∞–Ω–¥–∞ /say, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞
  bot.onText(/^\/say (.+)/, async (msg, match) => {
    if (msg.chat.type == 'private' &&  await memberStatus(config.group, msg.from.id) == 'admin') {
      console.log(match[1]);
      bot.sendMessage(config.group, match[1].replace('/n', '\n'), {parse_mode : 'markdown'}); 
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /fav, –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
  bot.onText(/^\/fav\b ?(.+)?/, (msg, match) => {
    if (msg.chat.type == 'supergroup') {
      if (msg.reply_to_message) {
        if (msg.reply_to_message.from.id != botMe.id) {
          mongoFavs.findOne({messageId: msg.reply_to_message.message_id}, function (err, fav) {
            if (!fav) {
              if (match[1] && match[1].length <= 80) {
                var caption = tools.capitalize(match[1]);
                mongoFavs.insertOne({messageId: msg.reply_to_message.message_id, messageDate: msg.reply_to_message.date, favCreatorId: msg.from.id, favCaption: caption});
                bot.sendMessage(msg.chat.id, messages.favAdd.replace('$fav', '¬´' + caption + '¬ª'));
              } else {
                bot.sendMessage(msg.chat.id, messages.favAddWrong, {parse_mode : 'markdown'});
              }
            } else {
              bot.sendMessage(msg.chat.id, messages.favAddDupl);
            }
          })
        } else {
          bot.sendMessage(msg.chat.id, messages.favAddWrong, {parse_mode : 'markdown'});
        }
      }
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /favs, –≤—ã–≤–æ–¥—è—â–∞—è —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.onText(/^\/favs\b/, (msg, match) => {
    mongoFavs.find({}).sort({messageDate: 1}).toArray(function(err, doc) {
      if (doc != null) {
        var ans = doc.map(function (u){
          return '<a href="http://t.me/' + group.username + '/' + u.messageId + '">' + u.favCaption + '</a>';       
      });
        bot.sendMessage(msg.chat.id, messages.favList + ans.join('\n'), {parse_mode : 'HTML', disable_web_page_preview: 'true'});
      }
    })
  });

  // –ö–æ–º–∞–Ω–¥–∞ /e, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∑–∞–∫–ª–∞–¥–∫–∏
  bot.onText(/^\/e\b ?([^\s]+)? ?(.+)?/, async (msg, match) => {
    if (match[1] && match[2] && await memberStatus(config.group, msg.from.id) == 'admin') {
      var id = Number(match[1]);
      mongoFavs.findOne({messageId: id}, function (err, fav) {
        if (fav) {
          mongoFavs.update({messageId: id}, {$set: {favCaption: match[2]}})
          bot.sendMessage(msg.chat.id, messages.favEdit.replace('$fav', '¬´' + match[2] + '¬ª'));
          } else { 
            bot.sendMessage(msg.chat.id, messages.favNotFound.replace('$fav', id));
          }
        })
      }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /d, —É–¥–∞–ª—è—é—â–∞—è –∑–∞–∫–ª–∞–¥–∫—É
  bot.onText(/^\/d\b ?(.+)?/, async (msg, match) => {
    if (match[1] && await memberStatus(config.group, msg.from.id) == 'admin') {
      var id = Number(match[1]);
      mongoFavs.findOne({messageId: id}, function (err, fav) {
        if (fav) {
          mongoFavs.deleteOne({messageId: id});
          bot.sendMessage(msg.chat.id, messages.favDel.replace('$fav', '¬´' + fav.favCaption + '¬ª'));
          } else { 
            bot.sendMessage(msg.chat.id, messages.favNotFound.replace('$fav', id));
          }
        })
      }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /mod, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
  bot.onText(/^\/mod\b/, async (msg, match) => {
    if (msg.reply_to_message) {
      if (msg.chat.type == 'supergroup' && await memberStatus(config.group, msg.from.id) == 'admin') {
        mongoUsers.findOne({userId: msg.reply_to_message.from.id}, function (err, user) {
          if (!user) {
            mongoUsers.insertOne({userId: msg.reply_to_message.from.id, mod: true});
            bot.sendMessage(msg.chat.id, messages.modAdd.replace('$username', '<a href=\"tg://user?id=' + msg.reply_to_message.from.id + '/\">' + 
            tools.nameToBeShow(msg.reply_to_message.from) + '</a>'), {parse_mode : 'HTML'});
          } else if (!user.mod){
            mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {mod: true}})
            bot.sendMessage(msg.chat.id, messages.modAdd.replace('$username', '<a href=\"tg://user?id=' + msg.reply_to_message.from.id + '/\">' + 
            tools.nameToBeShow(msg.reply_to_message.from) + '</a>'), {parse_mode : 'HTML'});
          } else {
            mongoUsers.update({userId: msg.reply_to_message.from.id}, {$unset: {mod: ''}});
            bot.sendMessage(msg.chat.id, messages.modDel.replace('$username', '<a href=\"tg://user?id=' + msg.reply_to_message.from.id + '/\">' + 
            tools.nameToBeShow(msg.reply_to_message.from) + '</a>'), {parse_mode : 'HTML'});
          }
        })
      }
    } else { // –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–≤ –º–æ–¥–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      mongoUsers.find({mod: true}).toArray(async function(err, mods) {
        var s = [];
        for (let mod of mods) {
          var inf = await bot.getChatMember(config.group, mod.userId);
          s.push(tools.nameToBeShow(inf.user));
        }
        bot.sendMessage(msg.chat.id, messages.modList + s.join('\n'), {parse_mode : 'HTML', disable_web_page_preview: 'true'});
      })
    }
  });

  bot.onText(/^\//, (msg, match) => {
    if (msg.chat.type == 'private') console.log('[Log]', tools.nameToBeShow(msg.from) + ' (' + msg.from.id + ') –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É: ' + msg.text);
  });

  // –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  bot.on('message', (msg) => {
    if (msg.chat.type == 'supergroup') {
    // –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö date –∏ uid –æ—Ç–ª—é—á–∞—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞
    // –ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤—Å—ë —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–∏—Å–∫–æ–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º    
      var from = {};
      if (msg.forward_from_chat) {
        if (msg.from.last_name) {
          from = {'id' : msg.from.id, 'first_name' : msg.from.first_name, 'last_name' : msg.from.last_name};
        } else {
          from = {'id' : msg.from.id, 'first_name' : msg.from.first_name};
        }
        if (msg.text) {
          mongoLog.insertOne({message_id: msg.message_id, from: from, 'chat' : msg.forward_from_chat.id, 'date' : msg.forward_date, 'text' : msg.text});
        } else {
          mongoLog.insertOne({message_id: msg.message_id, from: from, 'chat' : msg.forward_from_chat.id, 'date' : msg.forward_date,});
        }
      } else if (msg.forward_from) {
          if (msg.from.last_name) {
            from = {'id' : msg.from.id, 'first_name' : msg.from.first_name, 'last_name' : msg.from.last_name};
          } else {
            from = {'id' : msg.from.id, 'first_name' : msg.from.first_name};
          }
          if (msg.text) {
            mongoLog.insertOne({message_id: msg.message_id, from: from, 'date' : msg.forward_date, 'text' : msg.text});
          } else {
            mongoLog.insertOne({message_id: msg.message_id, from: from, 'date' : msg.forward_date});
          }
      } else {
        if (msg.from.last_name) {
          from = {'id' : msg.from.id, 'first_name' : msg.from.first_name, 'last_name' : msg.from.last_name};
        } else {
          from = {'id' : msg.from.id, 'first_name' : msg.from.first_name};
        }
        if (msg.text) {
          mongoLog.insertOne({message_id: msg.message_id, from: from, 'date' : msg.date, 'text' : msg.text});
        } else {
          mongoLog.insertOne({message_id: msg.message_id, from: from, 'date' : msg.date});
        }
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥-—Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç
  // C–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö { 'ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞': { toDel : [ { message_id, from: { id, first_name} } ], userId, userLink, timer, recTime } }
  bot.on('message', async (msg) => {
    if (msg.chat.type == 'private') {
      if (msg.forward_from || msg.forward_from_chat) {
        if (await memberStatus(config.group, msg.from.id) == 'admin' || 'moderator') {
          // –£ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ –∏–∑ —á–∞—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è
          var uid, ss = {};
          if (msg.forward_from) {
            uid = msg.forward_from.id;
            ss = {'from.id': msg.forward_from.id, 'date': msg.forward_date};
          } else if (msg.forward_from_chat) {
            uid = msg.from.id;
            ss = {'chat': msg.forward_from_chat.id, 'date': msg.forward_date};
          }
          if (!session[msg.from.id]) {
            if (Object.keys(session).length > 1) {
              console.log('[Log] –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∞ –µ—â—ë –æ–¥–Ω–∞');
            }
            session[msg.from.id] = {timer : setInterval(checkRecTime, 1000, msg), toDel: [], userId: []};
            console.log('[Log] –°–µ—Å—Å–∏—è ' + msg.from.id + ' (' + tools.nameToBeShow(msg.from) + ') —Å–æ–∑–¥–∞–Ω–∞');            
          } 
            // –§–æ—Ä–≤–∞—Ä–¥-–æ–±—ä–µ–∫—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ message_id –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            // –ü–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ —á–∞—Ç–∞, –¥–ª—è —ç—Ç–æ–≥–æ –∏—â—ë–º –ø–æ uid –Ω–∞–ø–∏—Å–∞–≤—à–µ–≥–æ –∏ –¥–∞—Ç–µ
            mongoLog.find(ss).toArray(function(err, found) {
              if(found.length === 0 || err){
                console.log('[Log] —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ mongoLog –∏–ª–∏ –æ—à–∏–±–∫–∞ ('+err+')');
              } else {
              // –î–∞—Ç–∞ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º
              // –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è message_id –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                if (found.length > 1) {
                  for (var i = 0; i < found.length; i++) {
                    if (!session[msg.from.id].toDel.find(o => o.message_id == found[i].message_id)) {
                      session[msg.from.id].toDel.push({'message_id': found[i].message_id, 'from': {'id': uid, 'first_name': found[i].from.first_name}});
                    }
                    session[msg.from.id].recTime = msg.date;
                  }
                  console.log('[Log] –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤–µ—Ä–Ω—É–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π uid –∏ date)');   
                } else {
                  session[msg.from.id].toDel.push({'message_id': found[0].message_id, 'from': {'id': uid, 'first_name': found[0].from.first_name}});
                  session[msg.from.id].recTime = msg.date;
                }
                // –í userId —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è uid –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (session[msg.from.id].userId.indexOf(uid) === -1) session[msg.from.id].userId.push(uid);
                // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –æ–¥–∏–Ω, —Ç–æ –≤ userLink –ø–æ–º–µ—â–∞–µ—Ç—Å—è –∏–º—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö —Å–æ–∑–¥–∞—Ç—å –µ—ë –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)
                if (session[msg.from.id].userId.length == 1) session[msg.from.id].userLink = '<a href=\"tg://user?id=' + uid + '/\">' + tools.nameToBeShow(found[0].from) + '</a>';
              }
            })
          }
      }
    }
  });

  // –ö–æ–≥–¥–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É, –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—ë–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
  // –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á—Ç–æ —Å —ç—Ç–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–µ–ª–∞—Ç—å - —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–º—É)
  // –í session –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç botMsg, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –±–æ—Ç–∞
  async function checkRecTime(msg) {
    if (moment().diff(moment.unix(session[msg.from.id].recTime), 'seconds') >= 2) {
      if (session[msg.from.id].userId.length == 1) {
        session[msg.from.id].botMsg = await bot.sendMessage(msg.chat.id, '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞?\n', {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: '–£–¥–∞–ª–∏—Ç—å', callback_data: 'delete'}, 
        {text: '–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å', callback_data: 'restrict'}, {text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel'}]]}});
        sessionTimeout(msg);
      } else {
        session[msg.from.id].botMsg = await bot.sendMessage(msg.chat.id, '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è?\n', {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: '–£–¥–∞–ª–∏—Ç—å', callback_data: 'delete'}, 
        {text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel'}]]}});
        sessionTimeout(msg);
      }
      session[msg.from.id].recTime = undefined;
      clearInterval(session[msg.from.id].timer);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', (msg) => {
    switch (msg.data) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏, –ø–µ—Ä–µ—Å—ã–ª–∞—é—â–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤ –∫–∞–Ω–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–≤–∞—Ç
    case 'send_del_msg':
      mongoDeleted.findOne({reportId: msg.message.message_id}, async function (err, find) {
        console.log('[Log]', tools.nameToBeShow(msg.from) + ' (' + msg.from.id + ') –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ' + find.forwardId);      
        if (find.forwardId.length) {
          for (var i = 0; i < find.forwardId.length; i++) {
            var success = true;
              try {
                await bot.forwardMessage(msg.from.id, config.channel, find.forwardId[i]);
              } catch(err) {
                success = false;
                bot.answerCallbackQuery(msg.id, messages.reSendErr, true);
                console.log('[Log] –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (' + err.message + ')');
              }
              if(success != false) {
                bot.answerCallbackQuery(msg.id, messages.reSend);
              }
          }
        } else { 
          // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —É–¥–∞–ª–µ–Ω–∏—è–º–∏ (—Ç–æ–≥–¥–∞ find.forwardId –Ω–µ –±—ã–ª –º–∞—Å—Å–∏–≤–æ–º)
          try {
            await bot.forwardMessage(msg.from.id, config.channel, find.forwardId);
          } catch(err) {
            success = false;
            bot.answerCallbackQuery(msg.id, messages.reSendErr, true);
            console.log('[Log] –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (' + err.message + ')');
          }
          if(success != false) {
            bot.answerCallbackQuery(msg.id, messages.reSend);
          }
        }
      });
      break;
      // –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
      case /buy_quote_/.test(msg.data) && msg.data:
        var id = msg.data.match(/buy_quote_(.*)/i);
        if (msg.from.id != id[1]) {
          bot.answerCallbackQuery(msg.id, messages.storeWrongId);
          break;
        }
        mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
          if (user && user.repPoints && user.repPoints >= messages.quotePrice) {
            fs.readFile('./texts/wheel.txt', 'utf8', function(err, data){
              var lines = data.split('\n\n');
              bot.editMessageText(messages.buyComplete.replace('$name', tools.nameToBeShow(msg.from)).replace('$price', tools.declension(messages.quotePrice, 'plus')).replace('$thing', '—Ü–∏—Ç–∞—Ç–∞').replace('$points', user.repPoints-messages.quotePrice), {chat_id: msg.message.chat.id, message_id: msg.message.message_id, parse_mode : 'markdown'});
              bot.sendMessage(config.group, tools.getRandom(lines),{reply_to_message_id: msg.message.message_id});
            });
            mongoUsers.update({userId: msg.from.id}, {$set: {repPoints: user.repPoints-messages.quotePrice}});
          } else bot.answerCallbackQuery(msg.id, messages.buyNotEnough);
        });
        break;
      case /buy_joke_/.test(msg.data) && msg.data:
        var id = msg.data.match(/buy_joke_(.*)/i);
        if (msg.from.id != id[1]) {
          bot.answerCallbackQuery(msg.id, messages.storeWrongId);
          break;
        }
        mongoUsers.findOne({userId: msg.from.id}, function (err, user) {
          if (user && user.repPoints && user.repPoints >= messages.jokePrice) {
            fs.readFile('./texts/jokes.txt', 'utf8', function(err, data){
              var lines = data.split('\n\n');
              bot.editMessageText(messages.buyComplete.replace('$name', tools.nameToBeShow(msg.from)).replace('$price', tools.declension(messages.jokePrice, 'plus')).replace('$thing', '—à—É—Ç–∫–∞').replace('$points', user.repPoints-messages.jokePrice), {chat_id: msg.message.chat.id, message_id: msg.message.message_id, parse_mode : 'markdown'});
              bot.sendMessage(config.group, tools.getRandom(lines),{reply_to_message_id: msg.message.message_id});
            });
            mongoUsers.update({userId: msg.from.id}, {$set: {repPoints: user.repPoints-messages.jokePrice}});
          } else bot.answerCallbackQuery(msg.id, messages.buyNotEnough);
        });
        break;
      // –ú–µ–Ω—é, –≤—ã—Å—ã–ª–∞–µ–º–æ–µ –∞–¥–º–∏–Ω—É –≤ –ø—Ä–∏–≤–∞—Ç –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
      case /antispam_(.*)_kick_/.test(msg.data) && msg.data:
        var id = msg.data.match(/antispam_(.*)_kick_(.*)/i);
        bot.kickChatMember(config.group, id[2]);
        bot.unbanChatMember(config.group, id[2]);
        bot.editMessageText(messages.kick.replace('$username', id[2]), {chat_id: config.admin, message_id: id[1]});        
        break;
      case /antispam_(.*)_ban_/.test(msg.data) && msg.data:
        var id = msg.data.match(/antispam_(.*)_ban_(.*)/i);
        bot.kickChatMember(config.group, id[2]);
        bot.editMessageText(messages.ban.replace('$username', id[2]), {chat_id: config.admin, message_id: id[1]});        
        break;
      case /antispam_(.*)_cancel/.test(msg.data) && msg.data:
        var id = msg.data.match(/antispam_(.*)_/i);
        bot.editMessageText(messages.menuCancel, {chat_id: config.admin, message_id: id[1]});
        break;
      // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –≤—ã–≤–æ–¥—è—â–µ–≥–æ—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–≤–∞—Ä–¥-—Å–æ–æ–±—â–µ–Ω–∏–π
      case 'delete':
        bot.editMessageText(messages.menuDelete, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnDelete}});
        session[msg.from.id].mode = 'waiting_delete_reason';
        sessionTimeout(msg);
        break;
      case /delete_/.test(msg.data) && msg.data:
        var match = msg.data.match(/delete_(.*)/i);
        del(msg, tools.menuReason(match));
        break;
      case 'restrict':
        bot.editMessageText(messages.menuRestrict, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnRestrict}, parse_mode : 'markdown'});
        sessionTimeout(msg);
        break;
      case 'mute_voice':
        bot.editMessageText(messages.menuMute, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnMute1Duration}});
        sessionTimeout(msg);
        break;
      case /mute_voice\((.*)\)/.test(msg.data) && msg.data:
        var duration = msg.data.match(/mute_voice\((.*)\)/i);
        mute(msg, 'voice', duration[1]);
        break;
      case 'mute_media':
        bot.editMessageText(messages.menuMute, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnMute2Duration}});
        sessionTimeout(msg);
        break;
      case /mute_media\((.*)\)/.test(msg.data) && msg.data:
        var duration = msg.data.match(/mute_media\((.*)\)/i);
        mute(msg, 'media', duration[1]);
        break;
      case 'kick':
        bot.editMessageText(messages.menuKick, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnKickReason}});
        session[msg.from.id].mode = 'waiting_kick_reason';
        sessionTimeout(msg);
        break;
      case 'ban':
        bot.editMessageText(messages.menuKick, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, reply_markup: {inline_keyboard: messages.btnBanReason}});
        session[msg.from.id].mode = 'waiting_ban_reason';
        sessionTimeout(msg);
        break;
      case /kick_/.test(msg.data) && msg.data:
        var match = msg.data.match(/kick_(.*)/i);
        kick(msg, 'kick', tools.menuReason(match));
        break;
      case /ban_/.test(msg.data) && msg.data:
        var match = msg.data.match(/ban_(.*)/i);
        kick(msg, 'ban', tools.menuReason(match));
        break;
      case 'cancel':
        bot.editMessageText(messages.menuCancel, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id});
        kickSession(msg);
        break;
    }
  });

  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è, –∫–∏–∫–∞ –∏–ª–∏ –±–∞–Ω–∞
  bot.on('message', (msg) => {
    if (session[msg.from.id] && session[msg.from.id].mode == 'waiting_delete_reason') {
      session[msg.from.id].mode == '';
      del(msg, msg.text);
    } else if (session[msg.from.id] && session[msg.from.id].mode == 'waiting_kick_reason') {
      session[msg.from.id].mode == '';
      kick(msg, 'kick', msg.text);
    } else if (session[msg.from.id] && session[msg.from.id].mode == 'waiting_ban_reason') {
      session[msg.from.id].mode == '';
      kick(msg, 'ban', msg.text);
    }
  });

  // –ö–æ–Ω–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∏–∫–∞/–±–∞–Ω–∞
  async function kick(msg, mode, reason) {
    var user = await bot.getChatMember(config.group, session[msg.from.id].userId[0]);
    if (user.status == 'member') {
      if (mode == 'kick') {
        bot.kickChatMember(config.group, session[msg.from.id].userId[0]);
        bot.unbanChatMember(config.group, session[msg.from.id].userId[0]);
        bot.sendMessage(config.group, '–ó–∞ ' + reason + ' ' + messages.kick.replace('$username', session[msg.from.id].userLink), {parse_mode : 'HTML'});
        bot.sendMessage(config.channel, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <a href=\"tg://user?id=' + msg.from.id + '/\">' + tools.nameToBeShow(msg.from) + '</a> –≤—ã–≥–Ω–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ ' + session[msg.from.id].userLink + ' –∑–∞ ' + reason + '.', {parse_mode : 'HTML'}); 
        bot.editMessageText('–£—á–∞—Å—Ç–Ω–∏–∫ ' + session[msg.from.id].userLink + ' –∏–∑–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞ –∑–∞ ' + reason + '.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
      } else if (mode == 'ban') {
        bot.kickChatMember(config.group, session[msg.from.id].userId[0]);
        bot.unbanChatMember(config.group, session[msg.from.id].userId[0]);
        bot.sendMessage(config.group, '–ó–∞ ' + reason + ' ' + messages.ban.replace('$username', session[msg.from.id].userLink), {parse_mode : 'HTML'});
        bot.sendMessage(config.channel, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <a href=\"tg://user?id=' + msg.from.id + '/\">' + tools.nameToBeShow(msg.from) + '</a> –∑–∞–±–∞–Ω–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ ' + session[msg.from.id].userLink + ' –∑–∞ ' + reason + '.', {parse_mode : 'HTML'}); 
        bot.editMessageText('–£—á–∞—Å—Ç–Ω–∏–∫ ' + session[msg.from.id].userLink + ' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ ' + reason + '.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
      }
    } else {
      bot.editMessageText(messages.fail, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
    }
    kickSession(msg);
  };

  // –ö–æ–Ω–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —É—á–∞—Å—Ç–Ω–∏–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  async function mute(msg, mode, duration) {
    var user = await bot.getChatMember(config.group, session[msg.from.id].userId[0]);
    if (user.status == 'member') {
      if (mode == 'voice') {
        bot.restrictChatMember(config.group, session[msg.from.id].userId[0], {
        until_date: tools.dconvert(duration, 'date'), 
        can_send_messages: false
        });
        bot.sendMessage(config.group, messages.restrictVoice.replace('$username', session[msg.from.id].userLink).replace('$duration', tools.dconvert(duration)), {parse_mode : 'HTML'});
        bot.sendMessage(config.channel, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <a href=\"tg://user?id=' + msg.from.id + '/\">' + tools.nameToBeShow(msg.from) + '</a> –∑–∞–ø—Ä–µ—Ç–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫—É ' + session[msg.from.id].userLink + ' –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + tools.dconvert(duration) + '.', {parse_mode : 'HTML'}); 
        bot.editMessageText('–£—á–∞—Å—Ç–Ω–∏–∫—É ' + session[msg.from.id].userLink + ' –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + tools.dconvert(duration) + '.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
      } else if (mode == 'media') {
        bot.restrictChatMember(config.group, session[msg.from.id].userId[0], {
        until_date: tools.dconvert(duration, 'date'), 
        can_send_messages: true, 
        can_send_media_messages: false, 
        can_send_other_messages: false, 
        can_add_web_page_previews: false
        });
        bot.sendMessage(config.group, messages.restrictMedia.replace('$username', session[msg.from.id].userLink).replace('$duration', tools.dconvert(duration)), {parse_mode : 'HTML'});
        bot.sendMessage(config.channel, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <a href=\"tg://user?id=' + msg.from.id + '/\">' + tools.nameToBeShow(msg.from) + '</a> –∑–∞–ø—Ä–µ—Ç–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫—É ' + session[msg.from.id].userLink + ' –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + tools.dconvert(duration) + '.', {parse_mode : 'HTML'}); 
        bot.editMessageText('–£—á–∞—Å—Ç–Ω–∏–∫—É ' + session[msg.from.id].userLink + ' –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + tools.dconvert(duration) + '.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
      }
    } else {
      bot.editMessageText(messages.fail, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
    }
    kickSession(msg);
  };

  // –ö–æ–Ω–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  async function del(msg, reason) {
    var report, forward;
    var ii = 0, message = '', names = '', error = '';
    var usrList = {}, forwList = [];
    session[msg.from.id].toDel.sort(tools.compareNumeric);   // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if (session[msg.from.id].toDel.length > 10) {
      bot.editMessageText('–ù–µ –±–æ–ª—å—à–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id});
      clearTimeout(session[msg.from.id].timeout);
      delete session[msg.from.id];
      console.log('[Log] –°–µ—Å—Å–∏—è ' + msg.from.id + ' —Å–±—Ä–æ—à–µ–Ω–∞');
      return;
    }
    // –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª –∏ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —á–∞—Ç–∞
    // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω–æ –±—ã–ª–æ –∫–µ–º-—Ç–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏
    for (var i = 0; i < session[msg.from.id].toDel.length; i++) {
      try {
        forward = await bot.forwardMessage(config.channel, config.group, session[msg.from.id].toDel[i].message_id, {disable_notification:true});
        forwList.push(forward.message_id);
      } catch(err) {
        console.log('[Log] –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ' + session[msg.from.id].toDel[i].message_id + ' –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π:', err.message);
        if (err.message.match(/400 Bad Request/i)) {
          error = '–æ–¥–Ω–æ –∏–∑ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
        } else {
          error = err.message;
        }
        break;
      }
        var name = '<a href=\"tg://user?id=' + session[msg.from.id].toDel[i].from.id + '/\">' + tools.nameToBeShow(session[msg.from.id].toDel[i].from) + '</a>';
        usrList[name] = (usrList[name] || 0) + 1;
    }
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–∞, —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —á–∞—Ç–∞
      if (!error) {
        for (var i = 0; i < session[msg.from.id].toDel.length; i++) {
          try {
            await bot.deleteMessage(config.group, session[msg.from.id].toDel[i].message_id);
          } catch(err) {
            console.log('[Log] —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ' + session[msg.from.id].toDel[i].message_id + ' –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π:', err.message);    
          }
        }
      } else {
        // –ò–ª–∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è; —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤ –∫–∞–Ω–∞–ª –≤—Å—ë —Ç–∞–∫–∏ —É—à–ª–∏
        for (var i = 0; i < forwList.length; i++) {
          try {
            await bot.deleteMessage(config.channel, forwList[i]);
          } catch(err) {
            console.log('[Log] —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ' + session[msg.from.id].toDel[i].message_id + ' –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π:', err.message);    
          }
        }
      }
    // –ü–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É usrList[] —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç—á—ë—Ç –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —á—å–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    for (var usr in usrList) {
      ii++;
      if (ii < Object.keys(usrList).length) {
        names += usrList[usr] + ' ' + usr + ', ';
      } else {
        names += usrList[usr] + ' ' + usr;
      }
      if (ii == 1) {
        message =  messages.deleteDel1.replace('$count', tools.declension(usrList[usr], 'message')).replace('$name', usr).replace('$reason', reason);
      } else if (ii >= 2) {
        message = messages.deleteDel2.replace('$names', names).replace('$reason', reason);
      }
    } 
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–∞, —Ç–æ –≤—ã—Å—ã–ª–∞—é—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    if (!error) {
      report = await bot.sendMessage(config.group, message, {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: messages. btnShowDeleted, callback_data: 'send_del_msg'}]]}});
      mongoDeleted.insertOne({reportId: report.message_id, forwardId: forwList});      
      bot.sendMessage(config.channel, '<a href="http://t.me/' + group.username + '/' + report.message_id + '">' + '[‚Üê]' + '</a> ' + message + ' –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href=\"tg://user?id=' + msg.from.id + '/\">' + tools.nameToBeShow(msg.from) + '</a>.', {parse_mode : 'HTML', disable_web_page_preview: 'true'});
      bot.editMessageText(message, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id, parse_mode : 'HTML'});
    } else {
      bot.editMessageText('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ (' + error + '). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.', {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id});
    }
    kickSession(msg);
  };

  // –§–Ω–∫—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
  function sessionTimeout(msg, mode) {
    clearTimeout(session[msg.from.id].timeout);
    session[msg.from.id].timeout = setTimeout(function kickSession(msg) { 
      bot.editMessageText(messages.sessionOutd, {chat_id: session[msg.from.id].botMsg.chat.id, message_id: session[msg.from.id].botMsg.message_id});  
      delete session[msg.from.id];
      console.log('[Log] –°–µ—Å—Å–∏—è ' + msg.from.id + ' —Å–±—Ä–æ—à–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–æ–º');
    }, config.sessionLifeTime, msg);
  }

  function kickSession(msg) {
    clearTimeout(session[msg.from.id].timeout);
    delete session[msg.from.id];
    console.log('[Log] –°–µ—Å—Å–∏—è ' + msg.from.id + ' –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
  const memberStatus = async (chatId, userId) => {
    var mods = await mongoUsers.findOne({userId: userId, mod: true});
    var admins = await bot.getChatAdministrators(chatId);
      if (mods) {
        return 'moderator';
      } else if (admins.filter(x => x.user.id == userId).length > 0) {
          return 'admin';
      } else {
        return 'user';
      }
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
  // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const deleteSpam = async (msg) => {
    var report, areport, forward;
    forward = await bot.forwardMessage(config.channel, msg.chat.id, msg.message_id, {disable_notification:true});
    report = await bot.sendMessage(msg.chat.id, messages.deleteSpam.replace('$username', '<a href=\"tg://user?id=' + msg.from.id + '/\">' + 
    tools.nameToBeShow(msg.from) + '</a>'), {parse_mode : 'HTML', reply_markup: {inline_keyboard: [[{text: messages. btnShowDeleted, callback_data: 'send_del_msg'}]]}});
    mongoDeleted.insertOne({msg, reportId: report.message_id, forwardId: forward.message_id});
    bot.deleteMessage(msg.chat.id, msg.message_id);
    // –ú–µ–Ω—é, –≤—ã—Å—ã–ª–∞–µ–º–æ–µ –∞–¥–º–∏–Ω—É –≤ –ø—Ä–∏–≤–∞—Ç –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    areport = await bot.sendMessage(config.admin, '–ê–Ω—Ç–∏—Å–ø–∞–º —Å—Ä–∞–±–æ—Ç–∞–ª');
    await bot.editMessageText('–ê–Ω—Ç–∏—Å–ø–∞–º —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <a href="http://t.me/chatbotlog/' + forward.message_id + '">' + report.message_id + '</a>. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–º?', {chat_id: areport.chat.id, message_id: areport.message_id, parse_mode : 'HTML', disable_web_page_preview: 'true', reply_markup: {inline_keyboard: [[{text: '–í—ã–≥–Ω–∞—Ç—å', callback_data: 'antispam_' + areport.message_id + '_kick_' + msg.from.id}, {text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback_data: 'antispam_' + areport.message_id + '_ban_' + msg.from.id}, {text: '–ù–∏—á–µ–≥–æ', callback_data: 'antispam_' + areport.message_id + '_cancel'}]]}});
  }

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  function reputationInc(msg) {
    mongoUsers.findOne({userId: msg.reply_to_message.from.id}, function (err, user) {        
      if (!user) {
        mongoUsers.insertOne({userId: msg.reply_to_message.from.id, repPoints: 1});
      } else if (!user.repPoints) {
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: 1}})
      } else {
        var count = user.repPoints + 1;
        mongoUsers.update({userId: msg.reply_to_message.from.id}, {$set: {repPoints: count}})
      }
    })
  };

});
